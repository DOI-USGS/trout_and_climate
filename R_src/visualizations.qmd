---
title: "visualizations"
format: html
editor: source
---

## Set up

```{r libraries, message=FALSE, warning=FALSE}

library(tidyverse)
library(sbtools)
library(gganimate)
library(tidyr)

```

## 1. Fetch

Activate ScienceBase credentials. Note, you only have to do this once to get the data the first time.

1.  Run the code below
2.  When prompted, enter your email address as the username
3.  Log into https://sciencebase.usgs.gov/manager/ and select "Copy API Token" from the User dropdown menu
4.  Copy the Token into the pop up dialog. If this worked, you should get a "TRUE" result in the console.

```{r SB, eval=FALSE}
sbtools::initialize_sciencebase_session()
```

Fetch data from ScienceBase.

> Benjamin, J.R., Dunham, J.B., and Penn, C.A., 2023, Simulated growth potential of redband trout in the Donner und Blitzen River Basin, southeastern Oregon, using a bioenergetics model: U.S. Geological Survey data release, https://doi.org/10.5066/P9MAXBZN.

```{r fetch, eval=FALSE}
sbtools::item_file_download(sb_id = "65381be6d34ee4b6e05bba62",
                            dest_dir = "in/sciencebase/",
                            overwrite_file = FALSE)

```

Read in files to the local environment

```{r, in}
# Read all the files in the in/ folder0
files_all <-  list.files(path = "in/sciencebase/")

# select only the csvs
files_csv <- files_all[grepl(pattern = ".csv", files_all)]

# Read in and row-bind all csvs
raw_data <- NULL
for(file in 1:length(files_csv)){
  # the location of this file 
  temp_file_name <- files_csv[file]
  temp_csv <- sprintf("in/sciencebase/%s", files_csv[file])
  temp <- readr::read_csv(temp_csv, show_col_types = FALSE)
  fish_size_temp <- ifelse(grepl(pattern = "10", x = temp_csv), 
                           yes = "Size 10",
                           no = ifelse(grepl(pattern = "150", x = temp_csv),
                                       yes = "Size 150",
                                       no = "Size 50"))
  water_status_temp <- ifelse(grepl(pattern = "warm", x = temp_csv),
                              yes = "Warm", 
                              no = ifelse(grepl(pattern = "cold", temp_csv),
                                          yes = "Cold", no = "Base"))
  
  temp <- temp |>
    mutate(fish_size = fish_size_temp,
           water_status = water_status_temp,
           filename = temp_file_name)
  
  raw_data <- raw_data |>
    bind_rows(temp)
}
```

Verify that the results look right


## 2. Process

Process this for graphing

```{r processing}
## Separating out m/d/y to individual columns
raw_date_sep <- tidyr::separate(raw_data, Date, c('month', 'day', 'year'), sep = "/",remove = FALSE)


## filtering out 150g body size
##filtered_raw_date <- raw_date_sep |> filter(fish_size != 'Size 150')

## Remove Date, Month, Day and filename
condensed_filtered_raw <- raw_date_sep |> select(-c(Date, month, day, filename))

## Now col: scenario
scenario_condensed_filtered <- condensed_filtered_raw |> mutate(scenario = sprintf("%s-%s", fish_size, water_status))

## remove redundant cols
final_condensation <- scenario_condensed_filtered |> select(-c(fish_size, water_status))

## Make long
final_long <- final_condensation |> 
                  pivot_longer(cols = starts_with("segment"),
                               names_to = "segment",
                               values_to = "Growth")

## Max, min for each year
max_min_final <- final_long |>
                  group_by(year, segment, scenario) |>
                  summarise(min_growth = min(Growth),
                            max_growth = max(Growth),
                            mean_growth = mean(Growth))

```

## 3. Visualize

Visualize the data

```{r visualization}
# Scatterplot for min_max values
ggplot(data = max_min_final,
       aes(x = scenario, y = max_growth,
           group = year)) +
          geom_point()


years_seg22_plot <- boxplot(segment_22 ~ year, temp_date_sep)
years_seg44_plot <- boxplot(segment_44 ~ year, temp_date_sep)
years_seg88_plot <- boxplot(segment_88 ~ year, temp_date_sep)
years_seg110_plot <- boxplot(segment_110 ~ year, temp_date_sep)
years_seg132_plot <- boxplot(segment_132 ~ year, temp_date_sep)
years_seg154_plot <- boxplot(segment_154 ~ year, temp_date_sep)

## Extremely inefficient viz setup of every other segment for each of the three body sizes, turned into a gif via ppt
seg_1_plot <- boxplot(segment_1 ~ fish_size, raw_data)
seg_11_plot <- boxplot(segment_11 ~ fish_size, raw_data)
seg_21_plot <- boxplot(segment_21 ~ fish_size, raw_data)
seg_31_plot <- boxplot(segment_31 ~ fish_size, raw_data)
seg_41_plot <- boxplot(segment_41 ~ fish_size, raw_data)
seg_51_plot <- boxplot(segment_51 ~ fish_size, raw_data)
seg_61_plot <- boxplot(segment_61 ~ fish_size, raw_data)
seg_71_plot <- boxplot(segment_71 ~ fish_size, raw_data)
seg_81_plot <- boxplot(segment_81 ~ fish_size, raw_data)
seg_91_plot <- boxplot(segment_91 ~ fish_size, raw_data)
seg_101_plot <- boxplot(segment_101 ~ fish_size, raw_data)
seg_111_plot <- boxplot(segment_111 ~ fish_size, raw_data)
seg_121_plot <- boxplot(segment_121 ~ fish_size, raw_data)
seg_131_plot <- boxplot(segment_131 ~ fish_size, raw_data)
seg_141_plot <- boxplot(segment_141 ~ fish_size, raw_data)
seg_151_plot <- boxplot(segment_151 ~ fish_size, raw_data)
seg_161_plot <- boxplot(segment_161 ~ fish_size, raw_data)
seg_171_plot <- boxplot(segment_171 ~ fish_size, raw_data)

```
