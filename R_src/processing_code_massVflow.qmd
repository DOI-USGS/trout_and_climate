---
title: "processing data"
format: html
editor: source
---

## Set up

```{r libraries, message=FALSE, warning=FALSE}

library(tidyverse)
library(readr)
library(quantreg)
library(sysfonts)
library(cowplot)
library(xkcd)

```

## 1. Fetch


```{r read, message=FALSE}
# #Norwest, Miller Q and prosper from Roy Sando
Sando.raw <- read.csv(file = "in/from_authors/SouthCentralOregon.csv") 

###Combine csv files of missing stream lines that are not in Sando's data release#########
###These are from the Miller et al. 2018? data release#########
extras <- list.files(path = "in/from_authors/Extras/", 
                     # Identify all csv files in folder
                     pattern = "*.csv", full.names = TRUE) |>
  lapply(read_csv) |>                                            
  # Store all files in list
  bind_rows()

```

## 2. Process for Figure 1

Calculate stream discharge for all streams

```{r processing}
# calculate median streamflow for each site and month
Sando.average <- Sando.raw |>
  select(COMID, contains("Streamflow")) |>
  group_by(COMID) |>
  summarise(across(everything(), list(median)))

# process extras to prep for combining with Sando
extras.clnd <- extras |> 
  filter(Year >= 2004) |>
  mutate(month_abb = month.abb[Month]) |>
  select(COMID, Year, Estimated.Q, Month, month_abb)

# make wide to match how Sando was imported
extras.wide <- extras.clnd |>
  select(-Month) |> 
  pivot_wider(names_from = month_abb, values_from = Estimated.Q) |>
  rename_at(vars(-COMID), ~ paste0(., 'Streamflow'))

extras.average <- extras.wide |>
  group_by(COMID) |>
  summarise(across(everything(), list(median))) |>
  select(-YearStreamflow_1)


#### BIND streamflow data TOGETHER
mean_streamflow <- bind_rows(Sando.average, extras.average)


# Site information (within COMID)
site.raw <- read_csv("in/from_authors/FishNorwest.csv",
                     show_col_types = FALSE) |>
  select(COMID, Site, AvgZwidth, SurfaceAre, AvgZArea, Dmax, AvgZmax)

site.average <- site.raw |>
  group_by(COMID, Site) |>
  summarise(across(everything(), list(mean)))

```

Read in fish data and process for plotting, including estimating mass off of length.

```{r fish_data}
fish.raw <- read_csv("in/from_authors/FishData.csv",
                     show_col_types = FALSE)

# Join with site information
fish.site <- fish.raw |> inner_join(site.average, by = "Site")

# Filter for species and flag (quality)
fish.site.trout <- fish.site |>
  filter(Species == "RT", Flag < 10)

# Calculate max length by site
trout.max <- fish.site.trout |> 
  group_by(Site, COMID) |>
  summarise(MaxFishLength = max(Length, na.rm = TRUE)) |>
  mutate(logLength = log(MaxFishLength)) 

# Merge with streamflow data
trout.streamflow <- trout.max |>
  inner_join(mean_streamflow, by = "COMID") |>
  # filter out when August streamflow is 0
  filter(AugStreamflow_1 > 0)


###### Calculate mass based on length
# a.reg = -4.77, b.reg = 2.9 from Kunkel 1976 Thesis
a.reg <- -4.77
b.reg <- 2.9

trout.mass <- trout.streamflow |>
  mutate(logMass = a.reg + (b.reg * log10(MaxFishLength)),
         massInit = 10^logMass) |>
  # filter out fish over 600 (assume big fish are migrants)
  filter(massInit <= 600)



```

Complete non-linear quantile regression with `{quantreg}` package.

```{r quant_regression}
quant_reg_out_mid <- quantreg::nlrq(
  formula = massInit ~ a*exp(b*log(AugStreamflow_1)),
  data = trout.mass,
  tau = 0.95,
  start = list(a = 150, b = 0.9) # seed values to start
)

# predict values off of equation to create line in graph
trout.mass$quant_reg_predicted <- 
  quantreg::predict.nlrq(object = quant_reg_out_mid)

quant_reg_out_LOW <- quantreg::nlrq(
  formula = massInit ~ a*exp(b*log(AugStreamflow_1)),
  data = trout.mass,
  tau = 0.025,
  start = list(a = 150, b = 0.9) # seed values to start
)

# predict values off of equation to create line in graph
trout.mass$quant_reg_predicted_low <- 
  quantreg::predict.nlrq(object = quant_reg_out_LOW)



```


## 3. Visualize
```{r design}
mike_base <- '#276952'
barry_base <- '#735E0B'
redband <- '#7A3608'
warm_water <- '#C3D3E8'
light_warm <- '#DBE5F1'
cold_water <- '#D1ECEB'
light_cold <- "#E0F0F0"
white <- '#FFFFFF'
black <- '#000000'

font_main <- "Source Sans Pro"
sysfonts::font_add_google(font_main)

font_supp <- "Patrick Hand"
sysfonts::font_add_google(font_supp)

# Make a canvas to put it all on
canvas_cold <- grid::rectGrob(
  x = 0, y = 0, 
  width = 9, height = 9,
  gp = grid::gpar(fill = "white", alpha = 1, col = "white")
)

# load circle for cowplot
mike <- 
  magick::image_read("../public/assets/vectorized_pngs/mike_1.png")
barry <-
  magick::image_read("../public/assets/vectorized_pngs/barry_1.png")
```



```{r plot}

library(geomtextpath)
(mass_streamflow_plot <-
    ggplot(data = trout.mass, aes(y = massInit, x = AugStreamflow_1)) +
    geom_point(shape = 19, aes(size = massInit), 
               color = redband, alpha = 0.3) + 
    geom_line(aes(y = quant_reg_predicted),
              linewidth = 1.4) +    
    # Add annotation to historic line that follows the curve of the line
    geomtextpath::geom_textsmooth(data = trout.mass, 
                                  aes(x = AugStreamflow_1, y = quant_reg_predicted, 
                                      label = "Top limit on size for ~95% of Redband Trout"),
                                  color = "black", size = 8, vjust = -.2, hjust = 0.4,
                                  linecolor = NA, family = font_supp) +
    xlab("August Streamflow (cubic feet per second)") +
    ylab("Redband Trout Mass (g)") +
    guides(color = "none",
           linewidth = "none") +
    scale_x_continuous(trans = 'log10') +
    scale_color_gradient2(low = mike_base,
                          mid = mike_base,
                          high = barry_base,
                          midpoint = 100) +
    theme_minimal()+
    theme(axis.title = element_text(size = 25),
          axis.text = element_text(size = 18),
          panel.background = element_rect(fill = NA),
          plot.background = element_rect(fill = NA, color = NA),
          legend.position = "none")) 


### COLD PLOT ###
ggdraw(ylim = c(0,1), 
       xlim = c(0,1)) +
  draw_grob(canvas_cold,
            x = 0, y = 1,
            height = 9, width = 7,
            hjust = 0, vjust = 1) +
  draw_plot(mass_streamflow_plot,
            x = 0.05,
            y = 0.05,
            height = 0.900,
            width = 0.900) 

ggsave(filename = "../public/assets/vectorized_pngs/page06.png", 
       width = 3000, height = 2300, dpi = 300, units = "px")

```