---
title: "processing data"
format: html
editor: source
---

## Set up

```{r libraries, message=FALSE, warning=FALSE}

library(tidyverse)
library(readr)
library(archive)
library(sysfonts)
library(png)
library(webp)
```

## 1. Fetch


Read in data for the fish growth model 

```{r fetch_in}

# Read all the files in the in/ folder0
files_all <-  list.files(path = "in/sciencebase/")

# select only the csvs
files_csv <- files_all[grepl(pattern = ".csv", files_all)]
fish_files_csv <- files_csv[grepl(pattern = "base", files_csv) |
                              grepl(pattern = "cold", files_csv) |
                              grepl(pattern = "warm", files_csv)]

# Read in and row-bind all csvs
fish_data <- NULL
for(file in 1:length(fish_files_csv)){
  # the location of this file 
  temp_file_name <- fish_files_csv[file]
  temp_csv <- sprintf("in/sciencebase/%s", fish_files_csv[file])
  temp <- readr::read_csv(temp_csv, show_col_types = FALSE)
  fish_size_temp <- ifelse(grepl(pattern = "10", x = temp_csv), 
                           yes = "Size 10",
                           no = ifelse(grepl(pattern = "150", x = temp_csv),
                                       yes = "Size 150",
                                       no = "Size 50"))
  water_status_temp <- ifelse(grepl(pattern = "warm", x = temp_csv),
                              yes = "Warm", 
                              no = ifelse(grepl(pattern = "cold", temp_csv),
                                          yes = "Cold", no = "Base"))
  
  temp <- temp |>
    mutate(fish_size = fish_size_temp,
           water_status = water_status_temp,
           filename = temp_file_name)
  
  fish_data <- fish_data |>
    bind_rows(temp)
}
```

Read in data for stream temperature from Penn et al. 2023 data release

```{r fetch_temperature}
segment_temp <- readr::read_csv("in/penn2023/nsegment_summary_seg_tave_water.csv", 
                        show_col_types = FALSE)

```


## 2. Process for Figure 2



```{r processing}
# Filter to 2020 as example for visualization
fish_2020 <- fish_data |>
  mutate(Date = as.Date(Date, format = "%m/%d/%Y"),
         month = lubridate::month(Date),
         scenario = sprintf("%s-%s", water_status, fish_size)) |>
  filter(lubridate::year(Date) == 2020)

temperature_2020 <- segment_temp |>
  filter(lubridate::year(Date) == 2020)

# make longer
fish_2020_long <- fish_2020 |> 
  pivot_longer(cols = contains("segment"),
               names_to = "segment",
               values_to = "fish_growth")

temperature_2020_long <- temperature_2020 |>
  pivot_longer(cols = c(-Date),
               names_to = "segment",
               values_to = "aveT") |>
  mutate(segment = sprintf("segment_%s", segment))

# Combine temperature with fish growth
fish_temperature <- fish_2020_long |>
  inner_join(temperature_2020_long, by = c("segment", "Date"))

mike_and_barry <- fish_temperature |> 
  filter(scenario %in% c("Cold-Size 10", "Warm-Size 50")) |>
  filter(
    (aveT <= 24 & scenario == "Cold-Size 10") |
    (aveT <= 28 & scenario == "Warm-Size 50")
  )

# scenario selection
cold_fish <- mike_and_barry |> filter(water_status == "Cold", segment == "segment_111") 
warm_fish <- mike_and_barry |> filter(water_status == "Warm", segment == "segment_111")

cold_adapted_optimal <- cold_fish |> filter(aveT <= 19.5, aveT >= 8) 
cold_adapted_stress <- cold_fish |> filter(aveT > 19.5)
warm_adapted_optimal <- warm_fish |> filter(aveT <= 24, aveT >= 10)
warm_adapted_stress <- warm_fish |> filter(aveT > 24)

```

```{r page08}
#font_main <- "Just Another Hand"
font_main <- "Source Sans Pro"
sysfonts::font_add_google(font_main)

color_cold_optimal <- "#7EACB5"
color_cold_stress <- '#7A3608'#"#C96868"
color_warm_optimal <- "#7EACB5"
color_warm_stress <- '#7A3608'#"#C96868"

library(geomtextpath)
ggplot(data = cold_fish, aes(y = fish_growth, x = aveT)) +
  # shade ribbons
  annotate("ribbon", ymax = rep(0.023, nrow(cold_adapted_stress) + 1), 
           ymin = c(cold_adapted_stress$fish_growth, min(cold_adapted_stress$fish_growth)), 
           alpha = 0.2, fill = color_cold_stress, linewidth = 10,
           x = c(cold_adapted_stress$aveT, 30)) +
  annotate("ribbon", ymax = rep(0.022, nrow(warm_adapted_stress) + 1), 
           ymin = c(warm_adapted_stress$fish_growth, min(warm_adapted_stress$fish_growth)), 
           alpha = 0.2, fill = color_warm_stress, linewidth = 10,
           x = c(warm_adapted_stress$aveT, 30)) +
  # x-axis 
  annotate(geom = "text", y = rep(0.028, 4), x = c(0, 10, 20, 30), 
           label = c(0, 10, 20, 30), 
           size = 16, color = "grey30", hjust = 0.5) +
  annotate(geom = "text", label = "degrees Celsius", hjust = 0, 
           x = 0.5, y = 0.028, size = 16, color = "grey30") +
  annotate(geom = "line", y = c(0.027, 0.018), x = rep(0, 2),
           linewidth = 0.8, color = "grey60") +
  annotate(geom = "line", y = c(0.027, 0.018), x = rep(10, 2),
           linewidth = 0.8, color = "grey60") +
  annotate(geom = "line", y = c(0.027, 0.018), x = rep(20, 2),
           linewidth = 0.8, color = "grey60") +
  annotate(geom = "line", y = c(0.027, 0.018), x = rep(30, 2),
           linewidth = 0.8, color = "grey60") +
  # y-axis
  annotate(geom = "line", y = rep(0, 2), x = c(-0.5, 30),
           linewidth = 0.8, color = "grey60") +
  annotate(geom = "text", label = "0\ng/g/day", x = -0.6, y = 0, 
           hjust = 1, size = 16, color = "grey30", lineheight = 0.8, vjust = 0.8) +
  annotate(geom = "line", y = rep(0.01, 2), x = c(-0.5, 30),
           linewidth = 0.8, color = "grey60") +
  annotate(geom = "text", label = "0.01\ng/g/day", x = -0.6, y = 0.01, 
           hjust = 1, size = 16, color = "grey30", lineheight = 0.8, vjust = 0.8) +
  annotate(geom = "line", y = rep(0.02, 2), x = c(-0.5, 30),
           linewidth = 0.8, color = "grey60") +
  annotate(geom = "text", label = "0.02\ng/g/day", x = -0.6, y = 0.02, 
           hjust = 1, size = 16, color = "grey30", lineheight = 0.8, vjust = 0.8) +
  # title
  annotate(geom = "text", y = 0.032, x = -4,          
           label = "Redband Trout growth rate versus stream temperature",
           color = "black", hjust = 0.02, size = 18, vjust = 0, fontface = "bold") +
  # highlights
  geom_line(data = cold_adapted_stress, color = "white", linewidth = 12) +  
  geom_line(data = warm_adapted_stress, color = "white", linewidth = 12) +
  geom_line(data = cold_fish, color = "white", linewidth = 4) +
  geom_line(data = warm_fish, color = "white", linewidth = 4) +
  geom_line(data = cold_adapted_stress, alpha = 0.7, color = color_cold_stress, linewidth = 10) +  
  geom_line(data = warm_adapted_stress, alpha = 0.7, color = color_cold_stress, linewidth = 10) +
  # mini bar charts
  annotate("line", x = c(cold_adapted_stress$aveT, 30), 
           y = rep(0.023, nrow(cold_adapted_stress) + 1), alpha = 0.7, 
           color = color_cold_stress, linewidth = 10) +  
  annotate("line", x = c(warm_adapted_stress$aveT, 30), 
           y = rep(0.022, nrow(warm_adapted_stress) + 1), alpha = 0.7, 
           color = color_cold_stress, linewidth = 10) +
  annotate("text", label = "Thermal stress", color = color_cold_stress,
           x = 20.8, y = 0.025, fontface = "bold",
           hjust = 0, size = 16) +
  # growth curves
  geom_line(linewidth = 2.0) +
  geom_line(data = warm_fish, linewidth = 2.0) +
  # Line label
  geomtextpath::geom_textsmooth(data = cold_fish, 
                                aes(label = "Cold-adapted Redband Trout"),
                                color = "black", size = 16, vjust = -.2, hjust = 000,
                                linecolor = NA, fontface = "bold") +
  # Line label
  geomtextpath::geom_textsmooth(data = warm_fish, 
                                aes(label = "Warm-adapted Redband Trout"),
                                color = "black", size = 16, vjust = -.2, hjust = 0.25,
                                linecolor = NA, fontface = "bold") +
  ylim(c(-0.0085, 0.0325)) +
  xlim(c(-4, 30)) +
  theme_void() +
  theme(panel.background = element_rect(fill = "white"),
        plot.background = element_rect(fill = "white", color = NA))

ggsave(filename = "../public/assets/vectorized_pngs/page08.png", 
       width = 3000, height = 2300, dpi = 150, units = "px")

# Convert to webp
img <- png::readPNG("../public/assets/vectorized_pngs/page08.png")
webp::write_webp(img, "../public/assets/vectorized_pngs/page08.webp")
```




