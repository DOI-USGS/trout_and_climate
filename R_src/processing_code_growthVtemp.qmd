---
title: "processing data"
format: html
editor: source
---

## Set up

```{r libraries, message=FALSE, warning=FALSE}

library(tidyverse)
library(readr)
library(archive)
```

## 1. Fetch

Activate ScienceBase credentials. Note, you only have to do this once to get the data the first time.

1.  Run the code below
2.  When prompted, enter your email address as the username
3.  Log into https://sciencebase.usgs.gov/manager/ and select "Copy API Token" from the User dropdown menu
4.  Copy the Token into the pop up dialog. If this worked, you should get a "TRUE" result in the console.

```{r SB, eval=FALSE}
# if file exists, skip
if(!file.exists("in/sciencebase/base10.csv")){
  
  sbtools::initialize_sciencebase_session()
  
  ### Fetch data from ScienceBase.
  
  # Benjamin, J.R., Dunham, J.B., and Penn, C.A., 2023, 
  # Simulated growth potential of redband trout in the Donner und Blitzen River 
  # Basin, southeastern Oregon, using a bioenergetics model: U.S. Geological 
  # Survey data release, https://doi.org/10.5066/P9MAXBZN.
  
  
  sbtools::item_file_download(sb_id = "65381be6d34ee4b6e05bba62",
                              dest_dir = "in/sciencebase/",
                              overwrite_file = FALSE)
  
  # Penn, C.A., Dunham, J.B., Markstrom, S.L., Overstreet, B.T., and Stratton, 
  # L.E., 2023, Simulated streamflow and stream temperature in the Donner und 
  # Blitzen River Basin, southeastern Oregon, using the Precipitation-Runoff 
  # Modeling System (PRMS): U.S. Geological Survey data release,
  # https://doi.org/10.5066/P9WQM25Y.
  
  sbtools::item_file_download(sb_id = "644a93add34ee8d4adee04be",
                              names = "Blitzen_PRMS_output.zip",
                              destinations = "in/sciencebase/Blitzen_PRMS_output.zip",
                              overwrite_file = FALSE)
  
  archive::archive_extract(
    archive = "in/sciencebase/Blitzen_PRMS_output.zip",
    dir = "in/sciencebase/Blitzen_PRMS_output.zip")
}
```

Read in data for the fish growth model 

```{r fetch_in}

# Read all the files in the in/ folder0
files_all <-  list.files(path = "in/sciencebase/")

# select only the csvs
files_csv <- files_all[grepl(pattern = ".csv", files_all)]
fish_files_csv <- files_csv[grepl(pattern = "base", files_csv) |
                              grepl(pattern = "cold", files_csv) |
                              grepl(pattern = "warm", files_csv)]

# Read in and row-bind all csvs
fish_data <- NULL
for(file in 1:length(fish_files_csv)){
  # the location of this file 
  temp_file_name <- fish_files_csv[file]
  temp_csv <- sprintf("in/sciencebase/%s", fish_files_csv[file])
  temp <- readr::read_csv(temp_csv, show_col_types = FALSE)
  fish_size_temp <- ifelse(grepl(pattern = "10", x = temp_csv), 
                           yes = "Size 10",
                           no = ifelse(grepl(pattern = "150", x = temp_csv),
                                       yes = "Size 150",
                                       no = "Size 50"))
  water_status_temp <- ifelse(grepl(pattern = "warm", x = temp_csv),
                              yes = "Warm", 
                              no = ifelse(grepl(pattern = "cold", temp_csv),
                                          yes = "Cold", no = "Base"))
  
  temp <- temp |>
    mutate(fish_size = fish_size_temp,
           water_status = water_status_temp,
           filename = temp_file_name)
  
  fish_data <- fish_data |>
    bind_rows(temp)
}
```

Read in data for stream temperature

```{r fetch_temperature}
segment_temp <- readr::read_csv("in/sciencebase/nsegment_summary_seg_tave_water.csv", 
                        show_col_types = FALSE)

```


## 2. Process for Figure 2



```{r processing}
# Filter to 1 year
fish_2020 <- fish_data |>
  mutate(Date = as.Date(Date, format = "%m/%d/%Y"),
         month = lubridate::month(Date),
         scenario = sprintf("%s-%s", water_status, fish_size)) |>
  filter(lubridate::year(Date) == 2020)

temperature_2020 <- segment_temp |>
  filter(lubridate::year(Date) == 2020)

# make longer
fish_2020_long <- fish_2020 |> 
  pivot_longer(cols = contains("segment"),
               names_to = "segment",
               values_to = "fish_growth")

temperature_2020_long <- temperature_2020 |>
  pivot_longer(cols = c(-Date),
               names_to = "segment",
               values_to = "aveT") |>
  mutate(segment = sprintf("segment_%s", segment))

# Combine temperature with fish growth
fish_temperature <- fish_2020_long |>
  inner_join(temperature_2020_long, by = c("segment", "Date"))
```

```{r plot, fig.height = 12, fig.width = 6}
ggplot(data = fish_temperature,
       aes(x = aveT, y = fish_growth, group = water_status)) +
  geom_point(aes(color = water_status)) +
  facet_wrap(~ fish_size, ncol = 1)

```



